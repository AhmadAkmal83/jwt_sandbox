services:
  jwt-db:
    image: postgres:16.10-alpine
    restart: unless-stopped
    networks:
      - app-network
    ports:
      - "9998:5432"
    environment:
      POSTGRES_DB: ${DB_DATABASE}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USERNAME} -d ${DB_DATABASE}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  jwt-app:
    build:
      context: .
      dockerfile: ./.docker/app/Dockerfile
    restart: unless-stopped
    networks:
      - app-network
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
      DB_HOST: ${DB_HOST}
      DB_PORT: ${DB_PORT}
      DB_DATABASE: ${DB_DATABASE}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
    depends_on:
      jwt-db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 5

  jwt-proxy:
    image: nginx:1.27-alpine
    restart: unless-stopped
    networks:
      - app-network
    ports:
      - "9999:80"
    volumes:
      - ./.docker/proxy/jwt.test.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      jwt-app:
        condition: service_healthy

volumes:
  db-data:
    driver: local
    name: kotlin-sandbox-jwt-db-data

networks:
  app-network:
    driver: bridge
    name: kotlin-sandbox-jwt-network
